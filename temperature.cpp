#include "temperature.h"
#include "heater.h"

Temperature::Temperature() {
}

void Temperature::Loop() {
	//mTemperature -= (mTemperature - 25.0) / 200.0;
	//mTemperature += Heater::Instance()() * 0.6;

	byte data[2];
	// Начинаем взаимодействие со сброса всех предыдущих команд и параметров
	mOneWire.reset();
	// Даем датчику DS18b20 команду пропустить поиск по адресу. В нашем случае только одно устрйоство
	mOneWire.write(0xCC); 
	// Даем датчику DS18b20 команду измерить температуру. Само значение температуры мы еще не получаем - датчик его положит во внутреннюю память
	mOneWire.write(0x44);
	// Микросхема измеряет температуру, а мы ждем.
	delay(1000);
	// Теперь готовимся получить значение измеренной температуры
	mOneWire.reset(); 
	// Даем датчику DS18b20 команду пропустить поиск по адресу. В нашем случае только одно устрйоство
	mOneWire.write(0xCC);
	// Просим передать нам значение регистров со значением температуры
	mOneWire.write(0xBE);
	// Получаем и считываем ответ
	// Читаем младший байт значения температуры
	data[0] = mOneWire.read();
	// А теперь старший
	data[1] = mOneWire.read();
	// Формируем итоговое значение: 
	// - сперва "склеиваем" значение, 
	// - затем умножаем его на коэффициент, соответсвующий разрешающей способности (для 12 бит по умолчанию - это 0,0625)
	mTemperature = ((data[1] << 8) | data[0]) * 0.0625;

	mMillisPrevious = millis();
}

const double* Temperature::operator()() {
	return &mTemperature;
}